# üõ†Ô∏è Simulador de Gesti√≥n de Mantenimiento

Este proyecto simula un programa de gesti√≥n de mantenimiento para la empresa de la que soy cofundador y en la cual trabajo. El objetivo es organizar la informaci√≥n de los equipos y registrar las intervenciones t√©cnicas realizadas mediante un sistema de tickets.

---

## üìå Funcionalidades principales

### 1. Alta de Equipos
- Se ingresan los siguientes datos:
  - Cliente
  - ID del equipo (formado por siglas del cliente + n√∫mero secuencial de 3 d√≠gitos)
  - Nombre del equipo (corto y descriptivo, ej: `Camara 1`, `Heladera bajomesada lobby`)
- Cada equipo queda almacenado en `localStorage`.
- ‚ö†Ô∏è **Actualmente, no se encuentra implementada la funcionalidad de modificar o eliminar equipos.**

### 2. Lista de Equipos
- Se muestran todos los equipos cargados junto con sus datos completos.

### 3. Carga de Tickets
- Se registra:
  - Cliente
  - ID de equipo
  - Tipo de ticket: `preventivo`, `correctivo` o `hiperactivo`
  - Estado del ticket
  - Fecha y observaciones

#### Tipos de ticket:
- **Preventivo:** tareas programadas de control rutinario.
- **Correctivo:** intervenciones que surgen por fallas o urgencias.
- **Hiperactivo:** tareas repetitivas o reincidentes que requieren atenci√≥n prioritaria por su frecuencia o impacto. *(Estos pueden incluir equipos que presentan fallas constantes o situaciones no resueltas en intervenciones anteriores.)*

### 4. Lista de Tickets
- Se visualizan todos los tickets generados con sus datos.
- El sistema valida que todos los campos sean completados antes de guardar.

---

## üß† Tecnolog√≠as utilizadas

- **HTML, CSS y JavaScript**
- **SCSS** para estilos organizados y reutilizables.
- **Toastify** para notificaciones visuales no intrusivas.
- **Fetch + JSON local** para simulaci√≥n de asincronismo en la carga de datos.

---


## üßë‚Äçüíª Autor

Este proyecto fue desarrollado como entrega final del curso de JavaScript en Coderhouse, aplicado a un caso real de la empresa donde actualmente trabajo.


